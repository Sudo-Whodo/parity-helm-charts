{{ $fullname :=  include "chart.fullname" . }}
{{ $metadataLabels :=  include "chart.labels" . }}
{{ $selectorLabels :=  include "chart.selectorLabels" .  }}
{{ $serviceAccountName :=  include "chart.serviceAccountName" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}
  labels:
  {{- $metadataLabels | nindent 4 }}
spec:
  selector:
    matchLabels:
  {{- $selectorLabels | nindent 6 }}
  replicas: 1
  serviceName: {{ $fullname }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
    {{- $selectorLabels | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.node.chainDataSnapshotUrl }}
        - name: download-snapshot
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              if [[ -d "/data/chains/${DB_PATH}/db" ]]; then
                echo "Database directory already exists, skipping snapshot download"
              else
                SNAPSHOT_URL="{{ .Values.node.chainDataSnapshotUrl }}"
                wget -O /data/snapshot $SNAPSHOT_URL
                mkdir -p /data/chains/${DB_PATH}/db/
                if [[ $(expr match "$SNAPSHOT_URL" ".*7z") != 0 ]]; then
                  7z x /data/snapshot -o/data/chains/${DB_PATH}/
                else
                  tar xvf /data/snapshot --directory=/data/chains/${DB_PATH}/
                fi
                rm /data/snapshot
              fi
          env:
            - name: DB_PATH
              value: {{ default .Values.node.chain .Values.node.dbPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
      {{- end }}
      containers:
        - name: {{ .Values.node.chain }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "--name"
            - "$(POD_NAME)"
            - "--base-path"
            - "/data/"
            - "--chain"
            - "$(CHAIN)"
          {{- toYaml .Values.node.flags | nindent 12 }}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
            - name: NODE_NAME
              value: "$(POD_NAME)"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - containerPort: 9933
              name: http-rpc
              protocol: TCP
            - containerPort: 9944
              name: websocket-rpc
              protocol: TCP
            - containerPort: 9615
              name: prometheus
              protocol: TCP
            - containerPort: 30333
              name: p2p
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http-rpc
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
          {{- toYaml .Values.node.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- if .Values.substrateApiSidecar.enabled }}
        - name: substrate-api-sidecar
          image: {{ .Values.substrateApiSidecar.image.repository }}:{{ .Values.substrateApiSidecar.image.tag }}
          env:
            {{- range $key, $val := .Values.substrateApiSidecar.env }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
          resources:
          {{- toYaml .Values.substrateApiSidecar.resources | nindent 12 }}
          ports:
            - containerPort: 8080
              name: api-sidecar
              protocol: TCP
        {{- end}}
      serviceAccountName: {{ $serviceAccountName}}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: chain-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.node.chainDataKubernetesVolumeSnapshot }}
        dataSource:
          name: {{ .Values.node.chainDataKubernetesVolumeSnapshot }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
        storageClassName: {{ .Values.storageClass }}
        resources:
          requests:
            storage: {{ .Values.node.dataVolumeSize }}
