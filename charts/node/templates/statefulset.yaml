{{ $fullname :=  include "chart.fullname" . }}
{{ $metadataLabels :=  include "chart.labels" . }}
{{ $selectorLabels :=  include "chart.selectorLabels" .  }}
{{ $serviceAccountName :=  include "chart.serviceAccountName" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}
  labels:
  {{- $metadataLabels | nindent 4 }}
spec:
  selector:
    matchLabels:
  {{- $selectorLabels | nindent 6 }}
  podManagementPolicy: {{ default "OrderedReady" .Values.node.podManagementPolicy }}
  replicas: {{ .Values.node.replicas | int }}
  serviceName: {{ $fullname }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
    {{- $selectorLabels | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.node.chainDataSnapshotUrl }}
        - name: download-chain-snapshot
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              if [ -d "/data/chains/${CHAIN_PATH}/db" ]; then
                echo "Database directory already exists, skipping snapshot download"
              else
                SNAPSHOT_URL="{{ .Values.node.chainDataSnapshotUrl }}"
                wget -O /data/snapshot ${SNAPSHOT_URL}
                if [ ! -f /data/snapshot ]; then
                  echo "Failed to download snapshot"
                  exit 1
                fi
                mkdir -p /data/chains/${CHAIN_PATH}/db/
                if [ "${SNAPSHOT_FORMAT}" == "7z" ]; then
                  7z x /data/snapshot -o/data/chains/${CHAIN_PATH}/
                else
                  tar xvf /data/snapshot --directory={{ .Values.node.chainDataSnapshotExtractionPath }}
                fi
                rm /data/snapshot
              fi
          env:
            - name: CHAIN_PATH
              value: {{ default .Values.node.chain .Values.node.chainPath }}
            - name: SNAPSHOT_FORMAT
              value: {{ default "tar" .Values.node.chainDataSnapshotFormat }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if .Values.node.chainDataGcsBucketUrl }}
        - name: sync-chain-gcs
          image: {{ .Values.googleCloudSdk.image.repository }}:{{ .Values.googleCloudSdk.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              {{- if .Values.googleCloudSdk.serviceAccountKey }}
              gcloud auth activate-service-account --key-file /tmp/service-account-key.json
              {{- end }}
              if [ -d "/data/chains/${CHAIN_PATH}/db" ]; then
                echo "Database directory already exists, skipping GCS sync"
              else
                BUCKET_URL="{{ .Values.node.chainDataGcsBucketUrl }}"
                LATEST=$(gsutil cat ${BUCKET_URL}/latest_version.meta.txt)
                if [ -z "$LATEST" ]; then
                  echo "Failed to retrieve latest_version metadata"
                  exit 1
                fi
                mkdir -p /data/chains/${CHAIN_PATH}/db/
                gsutil -m -o "GSUtil:parallel_process_count=3" -o "GSUtil:parallel_thread_count=15" rsync -d -r ${BUCKET_URL}/${LATEST} /data/chains/${CHAIN_PATH}/db/
              fi
          env:
            - name: CHAIN_PATH
              value: {{ default .Values.node.chain .Values.node.chainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
            {{- if .Values.googleCloudSdk.serviceAccountKey }}
            - name: service-account-key
              mountPath: "/tmp"
              readOnly: true
            {{- end }}
      {{- end }}
      {{- if .Values.node.keys }}
      - name: inject-keys
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        command: [ "/bin/sh" ]
        args:
          - -c
          - |
            {{- range $index, $key := .Values.node.keys }}
            echo {{ $key.seed }} > /dev/shm/{{ $index }}.key
            polkadot key insert --base-path /data --chain ${CHAIN} --key-type {{ $key.type }} --scheme {{ $key.scheme }} --suri /dev/shm/{{ $index }}.key
            rm /dev/shm/{{ $index }}.key
            {{- end }}
        env:
          - name: CHAIN
            value: {{ .Values.node.chain }}
        volumeMounts:
          - mountPath: /data
            name: chain-data
      {{- end }}
      containers:
        - name: {{ .Values.node.chain }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.node.perNodeServices.createP2pNodePortService }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - >
              POD_INDEX="${HOSTNAME##*-}";
              P2P_PORT=$(({{ .Values.node.perNodeServices.p2pNodePortStartRange }}+POD_INDEX));
              echo "P2P_PORT=${P2P_PORT}";
              exec polkadot \
                --name=${POD_NAME} \
                --base-path=/data/ \
                --chain=${CHAIN} \
                --listen-addr={{ .Values.node.perNodeServices.listenAddressBase }}${P2P_PORT} \
              {{- join " " .Values.node.flags | nindent 18 }}
          {{- else }}
          args:
            - "--name=$(POD_NAME)"
            - "--base-path=/data/"
            - "--chain=$(CHAIN)"
            {{- toYaml .Values.node.flags | nindent 12 }}
          {{- end }}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
            - name: NODE_NAME
              value: "$(POD_NAME)"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - containerPort: 9933
              name: http-rpc
              protocol: TCP
            - containerPort: 9944
              name: websocket-rpc
              protocol: TCP
            - containerPort: 9615
              name: prometheus
              protocol: TCP
            - containerPort: 30333
              name: p2p
              protocol: TCP
          {{- if .Values.node.enableStartupProbe }}
          # On startup, retry the connection to the /health endpoint every 10s for 5 min before killing the container
          startupProbe:
            failureThreshold: 30
            periodSeconds: 10
            # Use an exec command as Substate's default configuration only allow local network access to the RPC endpoint
            exec:
              command:
              - curl
              - "http://127.0.0.1:9933/health"
          {{- end }}
          {{- if .Values.node.enableReadinessProbe }}
          # Continuously retry the connection to the WS endpoint every 10s for 24h until success before marking the container as ready
          # If the WS endpoint is still not reachable (ie. node not fully synced) after 24 hours have passed, the container will be stuck in 'Not Ready' state
          readinessProbe:
            failureThreshold: 8640
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            # Important: the readiness probe will only work properly if the WS endpoint is exposed with --ws-external
            tcpSocket:
              port: websocket-rpc
          {{- end }}
          resources:
          {{- toYaml .Values.node.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- if .Values.substrateApiSidecar.enabled }}
        - name: substrate-api-sidecar
          image: {{ .Values.substrateApiSidecar.image.repository }}:{{ .Values.substrateApiSidecar.image.tag }}
          env:
            {{- range $key, $val := .Values.substrateApiSidecar.env }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
          resources:
          {{- toYaml .Values.substrateApiSidecar.resources | nindent 12 }}
          ports:
            - containerPort: 8080
              name: api-sidecar
              protocol: TCP
        {{- end}}
      serviceAccountName: {{ $serviceAccountName}}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.googleCloudSdk.serviceAccountKey }}
      volumes:
        - name: service-account-key
          secret:
            secretName: chain-data-gcs-bucket-service-account-key
      {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: chain-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.node.chainDataKubernetesVolumeSnapshot }}
        dataSource:
          name: {{ .Values.node.chainDataKubernetesVolumeSnapshot }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
        storageClassName: {{ .Values.storageClass }}
        resources:
          requests:
            storage: {{ .Values.node.dataVolumeSize }}
